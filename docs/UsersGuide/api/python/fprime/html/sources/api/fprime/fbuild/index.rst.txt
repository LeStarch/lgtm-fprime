:mod:`fprime.fbuild`
====================

.. py:module:: fprime.fbuild

.. autoapi-nested-parse::

   fprime.build:

   Sets up a singleton that handles the calls for build system help. This will allow for support of future build systems
   that are not CMake.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   cmake/index.rst
   settings/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   fprime.fbuild.CMakeHandler



Functions
~~~~~~~~~

.. autoapisummary::

   fprime.fbuild.builder


.. py:class:: CMakeHandler

   CMake handler interacts with an F prime CMake-based system. This will help us interact with CMake in refined ways.

   .. attribute:: CMAKE_DEFAULT_BUILD_NAME
      :annotation: = build-fprime-automatic-{}

      

   .. attribute:: CMAKE_LOCATION_FIELDS
      :annotation: = ['FPRIME_PROJECT_ROOT', 'FPRIME_LIBRARY_LOCATIONS', 'FPRIME_FRAMEWORK_PATH']

      

   .. method:: set_verbose(self, verbose)


      Sets verbosity


   .. method:: execute_known_target(self, target, build_dir, path, cmake_args=None, make_args=None, top_target=False)


      Executes a known target for a given build_dir. Path will default to a known path.

      :param build_dir: build_dir to use to run this.
      :param target: target to execute at the path, using above build_dir
      :param path: path to run target against. (default) current working directory
      :param cmake_args: cmake args input
      :param top_target: top-level target. Do not append path name
      :return: return code from CMake


   .. method:: find_hashed_file(self, build_dir, hash_value)


      Find a file from a hash

      :param build_dir: build directory to search
      :param hash_value: hash number
      :return: filename


   .. method:: find_nearest_standard_build(self, platform, path)


      Recurse up the directory tree from the given path, looking for a directory that matches the standard name. This
      will return that path, or error if one cannot be found.

      :return: path of nearest standard build directory
      :raises: CMakeInvalidBuildException, a build was found but not setup, CMakeOrphanException, no build was found


   .. method:: get_include_locations(self, cmake_dir)


      Gets the locations that can be used as the root of an include tree. Common directories are placed in these
      include locations. These include standard builds, configs, etc.

      ..note:: supplying a project dir as cmake_dir will setup a build-cache, and thus take much time.

      :param cmake_dir: directory of a CMake build, or directory containing a CMake project
      :return: list of include locations. Order: project, lib, lib, ..., F prime core


   .. method:: get_include_info(self, path, cmake_dir)


      Calculates the include root of the given path. The include root is defined as the following based on the other
      two values supplied. First, the following two path values are established:
      - Location of the project's root. This is defined in the project_dir's CMakeList.txt, or in the CMake Cache.
      - Location of the project's F prime checkout. This is defined in the same places.
      From there, the include root of the supplied path is whichever of those two paths is your parent. In cases where
      both are parents, it will take the outer-most parent

      ..note:: supplying a project dir as cmake_dir will setup a build-cache, and thus take much time.

      :param path: path to calculate looking for include-root
      :param cmake_dir: directory of a CMake build, or directory containing a CMake project
      :return: (relative include path, include root for the given path)


   .. method:: get_fprime_configuration(self, fields, cmake_dir=None)


      Gets fprime configuration for the given field(s). This will return a list of fields for the set of input fields.
      The user may supply a string for a single value returned as list of one, or a list of fields for list of values.

      :param fields: name of field, or list of names of fields
      :param cmake_dir: a cmake directory (project or build) to used. default: None, use existing temp cached build.
      :return: list of values, or Nones


   .. method:: _build_directory_from_cmake_dir(self, cmake_dir)


      If the supplied directory is a valid CMake build directory, then this will be returned. Otherwise, the file
      should be a valid CMake project directory containing a CMakeLists.txt with a project call. This will then
      generate a temporary directory to be used as a build.

      :return: working build directory


   .. method:: generate_build(self, source_dir, build_dir, args=None, ignore_output=False)


      Generate a build directory for purposes of the build.

      :param source_dir: source directory to generate from
      :param build_dir: build directory to generate to
      :param args: arguments to hand to CMake.
      :param ignore_output: do not print the output where the user can see it


   .. method:: _read_values_from_cache(self, keys, build_dir)


      Reads set values from cache into an output tuple.

      :param keys: keys to read in iterable
      :param build_dir: build directory containing cache file
      :return: a tuple of keys, None if not part of cache


   .. method:: _read_cache(self, build_dir)


      Reads the cache from the associated build_dir. This will return a dictionary of cache variable name to
      its value. This will not update internal state.

      :param build_dir: build directory to harvest for cache variables
      :return: {<cmake cache variable>: <cmake cache value>}


   .. method:: get_toolchain_config(self, project_path)


      Returns the default toolchain


   .. method:: load_settings(self, settings_file, cmake_dir)


      Loads the default settigns for this build Could include environment settings and a default toolchain.


   .. method:: _cmake_validate_source_dir(source_dir)
      :staticmethod:


      Raises an exception if the source dir is not a valid CMake source directory. This means a CMakeLists.txt exists
      and defines within it a project call.

      :param source_dir: source directory to validate


   .. method:: _cmake_validate_build_dir(build_dir)
      :staticmethod:


      Raises an exception if the build dir is not a valid CMake build directory

      :param build_dir: build_dir to validate


   .. method:: _cmake_referesh_cache(self, build_dir)


      Runs the cmake  target required to refresh the cmake cache. This will allow for unknown targets to be searched
      for before the utility gives up and produces.

      :param build_dir: directory to build in


   .. method:: _run_cmake(self, arguments, workdir=None, print_output=True, write_override=False, environment=None)


      Will run the cmake system supplying the given arguments. Assumes that the CMake executable is somewhere on the
      path in order for this to run.

      ..note:: this function has potential File System side-effects

      :param arguments: arguments to supply to CMake.
      :param workdir: work directory to run in
      :param print: print to the screen. Default: True
      :param write_override: allows for non-read-only commands
      :param environment: environment to write into
      :return: (stdout, stderr)


   .. method:: _communicate(proc, stdout, stderr, print_output=True)
      :staticmethod:


      Communicates with a process while assuring that output is captured and optionally printed. This will buffer
      lines for the standard out file handle when not none, and will always buffer standard error so that it can be
      provided when needed. This effectively replaces the .communicate method of the proc itself, while still
      preventing deadlocks.  The output is returned for each stream as a list of lines.

      :param proc: Popen process constructed with the above pairs to the submitted file handles
      :param stdout: standard output file handle. Paired with the FH provided to the Popen stdout argument
      :param stderr: standard error file handle. Paired with the FH provided to the Popen stderr argument
      :param print_output: print output to the screen. If False, output is masked. Default: True, print to screen.
      :return: return code, stdout as list of lines, stderr as list of lines



.. data:: _BUILDER
   

   

.. function:: builder()

   Gets the singleton builder from the module. If not created yet, one will be built and then returned.


